query Stats {
  userGeneSets {
    totalCount
  }
  geneSets {
    totalCount
  }
  pmcs {
    totalCount
  }
  pmcStats {
    nPublicationsProcessed
  }
}

query FetchUserGeneSet($id: UUID!) {
  userGeneSet(id: $id) {
    genes
    description
  }
}

query EnrichmentQuery($genes: [String]!, $filterTerm: String = "", $offset: Int = 0, $first: Int = 10, $filterFda: Boolean = false, $sortBy: String = "", $filterKo: Boolean = false, $topN: Int = 10000, $pvalueLe: Float = 0.05) {
  currentBackground {
    enrich(
      genes: $genes
      filterTerm: $filterTerm
      offset: $offset
      first: $first
      filterFda: $filterFda
      sortby: $sortBy
      filterKo: $filterKo
      topN: $topN
      pvalueLe: $pvalueLe
    ) {
      nodes {
        geneSetHash
        pvalue
        adjPvalue
        oddsRatio
        nOverlap
        geneSets {
          nodes {
            id
            term
            description
            nGeneIds
            geneSetFdaCountsById {
              nodes {
                approved
                count
                moa
              }
            }
          }
          totalCount
        }
      }
      totalCount
      consensusCount
      moasCount
      consensus {
        drug
        oddsRatio
        pvalue
        adjPvalue
        approved
        countSignificant
        countInsignificant
        countUpSignificant
        pvalueUp
        adjPvalueUp
        oddsRatioUp
        pvalueDown
        adjPvalueDown
        oddsRatioDown
      }
      moas {
        drug
        oddsRatio
        pvalue
        adjPvalue
        approved
        countSignificant
        countInsignificant
        countUpSignificant
        pvalueUp
        adjPvalueUp
        oddsRatioUp
        pvalueDown
        adjPvalueDown
        oddsRatioDown
      }
    }
  }
}

query PairEnrichmentQuery($genesUp: [String]!, $genesDown: [String]!, $filterTerm: String = "", $offset: Int = 0, $first: Int = 10, $filterFda: Boolean = false, $sortBy: String = "", $filterKo: Boolean = false, $topN: Int = 10000, $pvalueLe: Float = 0.05) {
  currentBackground {
    pairedEnrich(
      filterTerm: $filterTerm
      offset: $offset
      first: $first
      filterFda: $filterFda
      sortby: $sortBy
      filterKo: $filterKo
      topN: $topN
      pvalueLe: $pvalueLe
      genesDown: $genesDown
      genesUp: $genesUp
    ) {
      totalCount
      consensusCount
      moasCount
      consensus {
        drug
        oddsRatio
        pvalue
        adjPvalue
        approved
        countSignificant
        countInsignificant
        countUpSignificant
        pvalueUp
        adjPvalueUp
        oddsRatioUp
        pvalueDown
        adjPvalueDown
        oddsRatioDown
      }
      moas {
        drug
        oddsRatio
        pvalue
        adjPvalue
        approved
        countSignificant
        countInsignificant
        countUpSignificant
        pvalueUp
        adjPvalueUp
        oddsRatioUp
        pvalueDown
        adjPvalueDown
        oddsRatioDown
      }
      nodes {
        adjPvalueMimic
        adjPvalueReverse
        geneSetHashDown
        geneSetHashUp
        mimickerOverlap
        oddsRatioMimic
        geneSetHashUp
        oddsRatioReverse
        pvalueMimic
        pvalueReverse
        reverserOverlap
        geneSet {
          nodes {
            description
            id
            nGeneIds
            term
            geneSetFdaCountsById {
              nodes {
                count
                approved
                moa
              }
            }
          }
        }
      }
    }
  }
}


# Gene search: find all genesets containing certain gene(s)
query GeneSearch($genes: [String]!, $offset: Int = 0, $first: Int = 10) {
  geneSetGeneSearch(genes: $genes, offset: $offset, first: $first) {
    nodes {
      term
    }
    totalCount
  }
}

# Term search: find all genesets containing certain term(s)
query TermSearch($terms: [String]!, $offset: Int = 0, $first: Int = 10) {
  geneSetTermSearch(terms: $terms, offset: $offset, first: $first) {
    nodes {
      id
      term
      nGeneIds
    }
    totalCount
  }
}

mutation AddUserGeneSet($genes: [String], $description: String = "") {
  addUserGeneSet(input: {genes: $genes, description: $description}) {
    userGeneSet {
      id
    }
  }
}


query GetPmcInfoByIds($pmcids: [String]!){
  getPmcInfoByIds(pmcids: $pmcids) {
    nodes {
      pmcid
      title
      yr
      doi
    }
  }
}

query TermsPmcs($pmcids: [String]!) {
  termsPmcsCount(pmcids: $pmcids) {
    nodes {
      pmc
      id
      term
      count
    }
  }
}

query ViewGeneSet($id: UUID!) {
  geneSet(id: $id) {
    genes {
      nodes {
        symbol
        ncbiGeneId
        description
        summary
      }
    }
  }
}

query ViewGeneSet2($id: UUID!) {
  geneSet(id: $id) {
    term
    description
    genes {
      nodes {
        symbol
        ncbiGeneId
        description
        summary
      }
    }
  }
}

query ViewGeneSet3($term: String!) {
  geneSetByTerm(term: $term) {
    term
    description
    genes {
      nodes {
        symbol
        ncbiGeneId
        description
        summary
      }
    }
  }
}

query OverlapQuery($id: UUID!, $genes: [String]!) {
  geneSet(id: $id) {
    overlap(genes: $genes) {
      nodes {
        symbol
        ncbiGeneId
        description
        summary
      }
    }
  }
}

query FetchGeneInfo($genes: [String]!) {
  geneMap2(genes: $genes) {
    nodes {
      gene
      geneInfo {
        symbol
        ncbiGeneId
        description
        summary
      }
    }
  }
}

query LatestRelease {
  releases(orderBy: CREATED_DESC, first: 1) {
    nodes {
      created
    }
  }
}

# %%
import pandas as pd
import numpy as np
from matplotlib import pyplot as plt
import random
random.seed(123)
import pathlib
import seaborn as sns
import pathlib
from common import data_dir

#%%
fig_dir = pathlib.Path('figures')/'fig6'
fig_dir.mkdir(parents=True, exist_ok=True)

# %%
def read_gmt(path):
  with pathlib.Path(path).open('r') as fr:
    return {
      term: {
        gene: 1
        for gene in geneset
      }
      for line in fr
      for term, _, *geneset in (line.strip().split('\t'),)
    }

# %%
library_name = "GWAS_Catalog_2023"
distance_measure = "nmi"

# %% [markdown]
# # Prediction tables

# %%
df = pd.read_feather(data_dir/f"{distance_measure}.f") # Produced from similarity_matrices.ipynb
df.set_index(df.columns, drop=True, inplace=True)
np.fill_diagonal(df.values, np.nan)

lib = read_gmt(data_dir/f"Enrichr/{library_name}.gmt") # Download GMTs from https://maayanlab.cloud/Enrichr/#libraries
df_lib = pd.DataFrame({term: lib[term] for term in list(lib)})

# common genes
common = list(set(df_lib.index) & set(df.columns))
print(f"{len(df_lib.index)} genes in library")
print(f"{len(df.columns)} genes in matrix")
print(f"{len(common)} genes in common")

df_lib = df_lib.loc[common]
df = df[common]
df_lib = df_lib.fillna(0)

# compute gene-term association
sum_dist = df.fillna(0).dot(df_lib)
## divide by term size
sum_dist = sum_dist.div(df_lib.sum(), axis=1)
sum_dist

# %% [markdown]
# # ROC curves

# %%
from sklearn.metrics import RocCurveDisplay

# %%
term = random.choice(sum_dist.columns)
terms = random.choices(sum_dist.columns, k=9)

# %%
term='Fasting Plasma Glucose'
y_true = df_lib[term] # ground truth labels
y_probas = sum_dist.loc[common, term] # predicted probabilities generated by sklearn classifier
RocCurveDisplay.from_predictions(
    y_true,
    y_probas,
    color="darkorange",
    plot_chance_level=True,
)
plt.title(term)
plt.savefig(fig_dir/'6b.pdf', dpi=300)
plt.savefig(fig_dir/'6b.svg', dpi=300)

# %% [markdown]
# ## Save AUCs for the given library

# %%
from sklearn import metrics

aucs = []
for term in df_lib.columns:
    y = df_lib[term]
    pred = sum_dist.loc[common, term]
    fpr, tpr, thresholds = metrics.roc_curve(y, pred, pos_label=1)
    aucs.append(metrics.auc(fpr, tpr))

auc_df = pd.DataFrame(aucs, index=df_lib.columns)
auc_df.to_csv(data_dir/library_name/f"{distance_measure}_aucs.csv", header=False)

# %% [markdown]
# # Show all libraries

# %%
df = pd.DataFrame(columns=['AUC', 'Metric', 'Library'])
for folder in ["GWAS_Catalog", "MGI_Mammalian_Phenotypes", "GO_Biological_Process", "WikiPathways"]:
    cos_aucs = pd.read_csv(data_dir/folder/"cosine_aucs.csv", header=None, index_col=0, names=["AUC"])
    cos_aucs['Metric'] = "Rummagene cosine"
    jacc_aucs = pd.read_csv(data_dir/folder/"jaccard_aucs.csv", header=None, index_col=0, names=["AUC"])
    jacc_aucs['Metric'] = "Rummagene jaccard"
    nmi_aucs = pd.read_csv(data_dir/folder/"nmi_aucs.csv", header=None, index_col=0, names=["AUC"])
    nmi_aucs['Metric'] = "Rummagene NPMI"
    archs4_aucs = pd.read_csv(data_dir/folder/"archs4_aucs.csv", header=None, index_col=0, names=["AUC"])
    archs4_aucs['Metric'] = "ARCHS4 coexpression"

    temp = pd.concat([cos_aucs, jacc_aucs, nmi_aucs, archs4_aucs])
    # Rename
    if folder=="MGI_Mammalian_Phenotypes":
        temp['Library'] = "MGI_Phenotypes"
    elif folder=="GO_Biological_Process":
        temp['Library'] = "GO_BP"
    else:
        temp['Library'] = folder
    df = pd.concat([df, temp])

# %%
df

# %%
fig, ax = plt.subplots()
# the size of A4 paper
fig.set_size_inches(8, 3)
sns.violinplot(data=df, x="Library", y="AUC", hue="Metric")
plt.axhline(y=0.5, linestyle="dashed", c="black", lw=0.5)
plt.legend(bbox_to_anchor=(1.05, 0.8), loc='upper left', borderaxespad=0)
#plt.xticks(rotation=40, ha='right', rotation_mode='anchor')
fig.tight_layout()
plt.savefig(fig_dir/'6a.pdf', dpi=300)
plt.savefig(fig_dir/'6a.png', dpi=300)

